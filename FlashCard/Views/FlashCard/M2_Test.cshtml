@{
    ViewData["Title"] = "Flash Card";
    var translations = new Dictionary<string, Dictionary<string, string>>
    {
        { "2", new Dictionary<string, string> {
            { "AskQ", "ขออนุญาตถาม" },
            { "Yes", "ใช่" },
            { "No", "ไม่" }
        }},
        { "1", new Dictionary<string, string> {
            { "Want", "อยากได้ของ" },
            { "Hungry", "หิวข้าว" },
            { "Thirsty", "หิวน้ำ" }
            
        }}
    };
}

<div class="container home-bg flex-column">
    <img src="/pic/BG/Blank.png" class="background" />
    <a asp-action="M1_Enhance1" class="close-btn">
        <i class="fa-solid fa-xmark"></i>
    </a>

    @if (Model != null && Model.Imgbytes != null)
    {
        <div class="enhance-container">
            @if(Model.SubModule == "1"){
                <div class="question-text noto-bold">คนในภาพกำลังแสดงออกอย่างไร?</div>
            }
            else if(Model.SubModule == "2"){
                <div class="question-text noto-bold">คนในภาพต้องการแสดงออกอย่างไร?</div>
            }
            <img src="data:image/png;base64,@Convert.ToBase64String(Model.Imgbytes)" alt="Flashcard" class="flashcard" />
            <div class="m2-choices">
                @foreach (var choice in translations.Values)
                {
                    <button class="choice-btn noto-bold" data-answer="@choice">@choice</button>
                }
            </div>
            <a class="next-btn" style="opacity: 0; pointer-events: none;">
                <i class="fa-solid fa-chevron-right"></i>
                <div class="next-btn-text">ถัดไป</div>
            </a>
        </div>
    }
    else
    {
        <p>No Image Available</p>
    }
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const nextBtn = document.querySelector(".next-btn");
        const flashcard = document.querySelector(".flashcard");
        const choicesContainer = document.querySelector(".m2-choices");

        const translations = {
            "2": {
                "AskQ": "ขออนุญาตถาม",
                "Yes": "ใช่",
                "No": "ไม่"
            },
            "1": {
                "Hungry": "หิวข้าว",
                "Thirsty": "หิวน้ำ",
                "Want": "อยากได้ของ"
            }
        };

        let correctAnswer = "@Model.Answer".trim();
        let subModule = "@Model.SubModule".trim();
        let score = 0;

        function translateAnswer(subModule, key) {
            return translations[subModule]?.[key] || key;
        }

        function updateChoices(subModule, correctKey) {
            choicesContainer.innerHTML = "";

            const fragment = document.createDocumentFragment();
            const correctTranslated = translateAnswer(subModule, correctKey);

            Object.entries(translations[subModule] || {}).forEach(([key, choice], index) => {
                const button = document.createElement("button");
                button.classList.add("choice-btn", "noto-bold");
                button.textContent = choice;
                button.setAttribute("data-answer", choice);

                if (index === 0) {
                    button.style.gridColumn = "span 2";
                    button.style.width = "50%";
                    button.style.justifySelf = "center";
                    button.style.alignSelf = "center";
                }

                fragment.appendChild(button);
            });

            choicesContainer.appendChild(fragment);

            setTimeout(() => {
                attachChoiceEvents(correctTranslated);
            }, 10);
        }

        function attachChoiceEvents(correctTranslated) {
            const choiceButtons = document.querySelectorAll(".choice-btn");

            choiceButtons.forEach(button => {
                button.addEventListener("click", function () {
                    let userAnswer = this.getAttribute("data-answer").trim().toLowerCase();
                    let correctAns = correctTranslated.trim().toLowerCase();

                    this.classList.add("purple-bg"); // ใช้ .blue-bg แทนการเฉลย

                    if (userAnswer === correctAns) {
                        score++;
                    }

                    choiceButtons.forEach(btn => btn.disabled = true);
                    nextBtn.style.opacity = "1";
                    nextBtn.style.pointerEvents = "auto";
                    nextBtn.style.cursor = "pointer";
                });
            });
        }

        nextBtn.addEventListener("click", function () {
            const moduleValue = 2;
            const url = `@Url.Action("GetNextFlashCard_Test", "Flashcard")?module=${moduleValue}`;

            fetch(url, { method: 'GET' })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    flashcard.src = "data:image/png;base64," + data.imgBytes;
                    correctAnswer = data.correctAnswer.trim();
                    subModule = data.subModule.trim();

                    const questionText = document.querySelector(".question-text");
                    if (subModule === "1") {
                        questionText.textContent = "คนในภาพกำลังแสดงออกถึงอะไร?";
                    } else if (subModule === "2") {
                        questionText.textContent = "คนในภาพต้องการแสดงออกอย่างไร?";
                    }

                    updateChoices(subModule, correctAnswer);
                    nextBtn.style.opacity = "0";
                    nextBtn.style.pointerEvents = "none";
                    nextBtn.style.cursor = "pointer";
                } else {
                    const module = encodeURIComponent("M2");
                    window.location.href = `@Url.Action("M1_Test_Done", "Flashcard")?score=${score}&module=${module}`;
                }
            })
            .catch(error => console.error('Error:', error));
        });

        updateChoices(subModule, correctAnswer);
    });

</script>
